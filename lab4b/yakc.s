; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
L_yakc_1:
	DB	"Init kernel.",0xA,0
	ALIGN	2
YKInitialize:
	; >>>>> Line:	24
	; >>>>> { 
	jmp	L_yakc_2
L_yakc_3:
	; >>>>> Line:	26
	; >>>>> printString("Init kernel.\n"); 
	mov	ax, L_yakc_1
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	28
	; >>>>> YKCtxSwCount =0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	29
	; >>>>> YKIdleCount = 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	30
	; >>>>> running =0; 
	mov	word [running], 0
	; >>>>> Line:	31
	; >>>>> depth = 0; 
	mov	word [depth], 0
	; >>>>> Line:	33
	; >>>>> YKemptyTCBList = &(YKTCBArray[0]); 
	mov	word [YKemptyTCBList], YKTCBArray
	; >>>>> Line:	34
	; >>>>> for (i = 0; i < 3; i++) 
	mov	word [bp-2], 0
	jmp	L_yakc_5
L_yakc_4:
	; >>>>> Line:	35
	; >>>>> YKTCBArray[i].next = &(YKTCBArray[i+1]); 
	mov	ax, word [bp-2]
	inc	ax
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	push	ax
	mov	ax, word [bp-2]
	mov	cx, 14
	imul	cx
	mov	dx, ax
	add	dx, YKTCBArray
	mov	si, dx
	add	si, 10
	pop	ax
	mov	word [si], ax
L_yakc_7:
	inc	word [bp-2]
L_yakc_5:
	cmp	word [bp-2], 3
	jl	L_yakc_4
L_yakc_6:
	; >>>>> Line:	36
	; >>>>> YKTCBArray[3].next = 0; 
	mov	word [(52+YKTCBArray)], 0
	; >>>>> Line:	37
	; >>>>> YKNewTask(YKIdleTask, (void *)&IdleStk[256],100 ); 
	mov	al, 100
	push	ax
	mov	ax, (IdleStk+512)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	mov	sp, bp
	pop	bp
	ret
L_yakc_2:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_3
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	41
	; >>>>> void YKIdleTask(void){ 
	jmp	L_yakc_9
L_yakc_10:
	; >>>>> Line:	43
	; >>>>> while(1){ 
	jmp	L_yakc_12
L_yakc_11:
	; >>>>> Line:	44
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	45
	; >>>>> YKIdleCount++; 
	inc	word [YKIdleCount]
	; >>>>> Line:	46
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_12:
	jmp	L_yakc_11
L_yakc_13:
	mov	sp, bp
	pop	bp
	ret
L_yakc_9:
	push	bp
	mov	bp, sp
	jmp	L_yakc_10
	ALIGN	2
YKNewTask:
	; >>>>> Line:	50
	; >>>>> void YKNewTask(void (* task)(void), void *taskStack, unsigned char priority){ 
	jmp	L_yakc_15
L_yakc_16:
	; >>>>> Line:	54
	; >>>>> newTask = YKemptyTCBList; 
	mov	ax, word [YKemptyTCBList]
	mov	word [bp-2], ax
	; >>>>> Line:	55
	; >>>>> YKemptyTCBList = newTas 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [si]
	mov	word [YKemptyTCBList], ax
	; >>>>> Line:	57
	; >>>>> if (YKRdyTCBList == 0) 
	mov	ax, word [YKRdyTCBList]
	test	ax, ax
	jne	L_yakc_17
	; >>>>> Line:	59
	; >>>>> YKRdyTCBList = newTask; 
	mov	ax, word [bp-2]
	mov	word [YKRdyTCBList], ax
	; >>>>> Line:	60
	; >>>>> newTask->next = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	61
	; >>>>> newTask->prev = 0; 
	mov	si, word [bp-2]
	add	si, 12
	mov	word [si], 0
	jmp	L_yakc_18
L_yakc_17:
	; >>>>> Line:	66
	; >>>>> tmp2 = YKRdyTCBList; 
	mov	ax, word [YKRdyTCBList]
	mov	word [bp-4], ax
	; >>>>> Line:	67
	; >>>>> while (tmp2->priority < newTask->priority) 
	jmp	L_yakc_20
L_yakc_19:
	; >>>>> Line:	68
	; >>>>> tmp2 = tmp2->next; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_20:
	mov	si, word [bp-4]
	add	si, 8
	mov	di, word [bp-2]
	add	di, 8
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_19
L_yakc_21:
	; >>>>> Line:	71
	; >>>>> if (tmp2->prev == 0) 
	mov	si, word [bp-4]
	add	si, 12
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_22
	; >>>>> Line:	73
	; >>>>> YKRdyTCBList = newTask; 
	mov	ax, word [bp-2]
	mov	word [YKRdyTCBList], ax
	; >>>>> Line:	74
	; >>>>> newTask->prev = 0; 
	mov	si, word [bp-2]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	75
	; >>>>> newTask->prev = YKRdyTCBList; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [YKRdyTCBList]
	mov	word [si], ax
	; >>>>> Line:	76
	; >>>>> newTask->next->prev= newTask; 
	mov	si, word [bp-2]
	add	si, 10
	mov	si, word [si]
	add	si, 12
	mov	ax, word [bp-2]
	mov	word [si], ax
	jmp	L_yakc_23
L_yakc_22:
	; >>>>> Line:	81
	; >>>>> tmp2->prev->next = newTask; 
	mov	si, word [bp-4]
	add	si, 12
	mov	si, word [si]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	82
	; >>>>> newTask->prev = tmp2->prev; 
	mov	si, word [bp-4]
	add	si, 12
	mov	di, word [bp-2]
	add	di, 12
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	83
	; >>>>> Curr 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	84
	; >>>>> tmp2->prev = newTask; 
	mov	si, word [bp-4]
	add	si, 12
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_23:
L_yakc_18:
	mov	sp, bp
	pop	bp
	ret
L_yakc_15:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_16
	ALIGN	2
YKCtxSwCount:
	TIMES	2 db 0
YKIdleCount:
	TIMES	2 db 0
IdleStk:
	TIMES	512 db 0
YKRdyTCBList:
	TIMES	2 db 0
YKemptyTCBList:
	TIMES	2 db 0
YKTCBArray:
	TIMES	56 db 0
YKcurrTask:
	TIMES	2 db 0
running:
	TIMES	2 db 0
depth:
	TIMES	2 db 0
CurrPriority:
	TIMES	2 db 0
NextPriority:
	TIMES	2 db 0
